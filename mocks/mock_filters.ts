import * as Helpers from './helpers';

import { allRandomBasicItems } from './autogenerated_mock_elements';

import { getAllTypesOfEntity } from './mock_typesOfEntity';

import { makeRandomBasicEntity } from './mock_entities';



import { UserInputError } from 'apollo-server';
import { generateRandomBunchOfItemListings } from './mock_items';


let allPossibleThumbnails = [];
for(var i=30;i<150;i++) allPossibleThumbnails.push(`https://placeimg.com/${i}/${i}/any`);
 


export function getGlobalFilterResult( args:any ){
    let allTypesOfEntity = getAllTypesOfEntity();

    let typeOfEntityFiler = args.typeOfEntityFiler;
    if(!typeOfEntityFiler) {
        typeOfEntityFiler = [];
        allTypesOfEntity.forEach( (toe) => {
            typeOfEntityFiler.push( { typeOfEntityId: toe.id , enabled: true } );
        } );
    }

    let entitiesData = [];

    for(var i=0;i<typeOfEntityFiler.length;i++){
        let toe = allTypesOfEntity.find( (toe) => toe.id === typeOfEntityFiler[i].typeOfEntityId );
        if(!toe){
            throw new UserInputError('Form Arguments invalid', {
                message: "No Type of entity present with id: '" + typeOfEntityFiler[i].typeOfEntityId + "'",
                invalidArgs: [typeOfEntityFiler]
            });
        } else {
            let toeCount = Helpers.getRandomIntInclusive(20000,50000);
            let countData = {
                type:toe,
                count: toeCount
            };
            let entitiesCountData = [];
            while(toeCount>0){
                let count = Helpers.getRandomIntInclusive(1000,5000);
                toeCount -= count;
                let eCdta = {
                    entity: makeRandomBasicEntity(toe),
                    count
                };
                entitiesCountData.push(eCdta);
            }
            entitiesData.push({
                countData,
                entitiesCountData
            });
        }
    }

    return {
        entitiesData,
        items: generateRandomBunchOfItemListings(allPossibleThumbnails)
    };
}
