import * as Helpers from './helpers';

import { allRandomBasicItems, allRandomItemDetails } from './autogenerated_mock_elements';
import { getAllTypesOfEntity } from './mock_typesOfEntity';

function getBasicItemById(id:String):any{
  for(var i=0;i<allRandomBasicItems.length;i++){
    if(allRandomBasicItems[i].id===id){
      return allRandomBasicItems[i];
    }
  }
  return null;
}


export function getAllBasicItems(){
  return allRandomBasicItems;
}



let allPossibleThumbnails = [];
for(var i=30;i<150;i++) allPossibleThumbnails.push(`https://placeimg.com/${i}/${i}/any`);


export function getItemDetails(args : any){
  const itemId = args.itemId;
  const maxSimilarItems = args.maxSimilarItems;
  if(!itemId) return null;
  let itemDetails = allRandomItemDetails[itemId+''];
  if(!itemDetails) return null;
  if(args.maxSimilarItems)
    itemDetails.similarItems = generateRandomBunchOfItemListings(allPossibleThumbnails,args.maxSimilarItems);
  else
    itemDetails.similarItems = generateRandomBunchOfItemListings(allPossibleThumbnails);
  return itemDetails;
}


const allTypesOfEntity = getAllTypesOfEntity();


function makeRandomTOEData(){
 let toeData = [];
 allTypesOfEntity.forEach( toe => {
   toeData.push({
     type: toe,
     count: Helpers.getRandomIntInclusive(5,20)
   });
 });
 return toeData;
}


export function generateRandomBunchOfItemListings(allPossibleThumbnails:string[],numOfItemsInput?:number): any[]{
  let itemListings = [];
  let numOfItems = Helpers.getRandomIntInclusive(10,30);
  if(numOfItemsInput && numOfItemsInput>0) numOfItems = numOfItemsInput;
  numOfItems = Math.min(numOfItems,allRandomBasicItems.length-1);
  let basicItemsIdx = Helpers.pickNDistinctPositiveIntegers(allRandomBasicItems.length-1,numOfItems);
  let randNum = Helpers.getRandomIntInclusive(1,9);
  let randYear = Helpers.getRandomIntInclusive(1890,2002);
  let randMonth = Helpers.randomPick(['gen','feb','mar','apr','mag','giu','lug','ago','set','ott','nov','dic']);
  let randomDay = Helpers.getRandomIntInclusive(1,28);
  const dateBlabel = `${randNum}(${randYear} ${randMonth}.${randomDay})`;
  basicItemsIdx.forEach(bIdx => {
      let itemL = {
          item:allRandomBasicItems[bIdx],
          thumbnail: Helpers.randomPick(allPossibleThumbnails),
          relatedTOEData: makeRandomTOEData(),
          breadcrumbs: [ // TODO: improve the mock (if needed)
            { label: Helpers.randomPick(["Raccolte speciali","Raccolte standard","Archivio"]),
              link: null },
            { label: Helpers.randomPick([ "Ministero dell'interno",
                                          "Ministero dell'estero",
                                          "Ufficio Principale",
                                          "Ufficio Secondario" ]), link: null },
            { label: "..." , link: null },{ label: "...", link: null },
            { label: Helpers.randomPick([ "Fascicolo della segreteria",
                                          "Fascicolo primario",
                                          "Documento generale" ]), link: null },
            { label: dateBlabel , link: null }
          ]
      };
      itemListings.push(itemL);
  });
  return itemListings;
}
