import * as Helpers from './helpers';

import { allRandomBasicItems } from './autogenerated_mock_elements';

import { getAllTypesOfEntity } from './mock_typesOfEntity';

export function autocomplete( args:any ){
  let input = args.input;
  let inputLowerCase = input.toLowerCase();
  if(!input){
    Helpers.throwUserInputErrorParameterNotProvided('input');
  }

  let filtered = allRandomBasicItems.filter(
     (item) => {
       if(item.label.toLowerCase().includes(inputLowerCase)) return true;
       for(var i=0; i<item.info.length;i++){
          if(item.info[i].value.toLowerCase().includes(inputLowerCase)) return true;
       }
       return false;
     }
  );

  const allToE = getAllTypesOfEntity();

  let results = [];
  filtered.forEach( (fe) => {
    results.push({
      item: fe,
      thumbnail: 'https://placeimg.com/50/50/any',
      relatedTOEData: null,
      typeOfEntity: Helpers.randomPick(allToE)
    }
    );
  });

  let totalCount = results.length;
  if(!args.itemsPagination)
    return {
      totalCount,
      items: results
    };

  let pagination = args.itemsPagination;
  let mockOffset = 0;

  while( (mockOffset<pagination.offset) &&
      (mockOffset<results.length-pagination.limit) ) mockOffset+=1;

  let items = results.slice(mockOffset,mockOffset+pagination.limit);

  return { totalCount , items };
}