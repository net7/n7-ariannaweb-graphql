"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Helpers = __importStar(require("./helpers"));
var autogenerated_mock_elements_1 = require("./autogenerated_mock_elements");
var mock_typesOfEntity_1 = require("./mock_typesOfEntity");
function autocomplete(args) {
    var input = args.input;
    var inputLowerCase = input.toLowerCase();
    if (!input) {
        Helpers.throwUserInputErrorParameterNotProvided('input');
    }
    var filtered = autogenerated_mock_elements_1.allRandomBasicItems.filter(function (item) {
        if (item.label.toLowerCase().includes(inputLowerCase))
            return true;
        for (var i = 0; i < item.info.length; i++) {
            if (item.info[i].value.toLowerCase().includes(inputLowerCase))
                return true;
        }
        return false;
    });
    var allToE = mock_typesOfEntity_1.getAllTypesOfEntity();
    var results = [];
    filtered.forEach(function (fe) {
        results.push({
            item: fe,
            thumbnail: 'https://placeimg.com/50/50/any',
            relatedTOEData: null,
            typeOfEntity: Helpers.randomPick(allToE)
        });
    });
    var totalCount = results.length;
    if (!args.itemsPagination)
        return {
            totalCount: totalCount,
            items: results
        };
    var pagination = args.itemsPagination;
    var mockOffset = 0;
    while ((mockOffset < pagination.offset) &&
        (mockOffset < results.length - pagination.limit))
        mockOffset += 1;
    var items = results.slice(mockOffset, mockOffset + pagination.limit);
    return { totalCount: totalCount, items: items };
}
exports.autocomplete = autocomplete;
