











#======================================================================================
#                                DATA TYPES
#======================================================================================

""" A generic type of entity (such as: 'persone', 'luoghi', etc...) """
type TypeOfEntity {
    id: ID!
    label: String!
    configKey: String
}


""" An basic entity (such as: 'Alighiero Boetti', 'Luce', etc...) """
type BasicEntity {
    id: ID!
    label: String!
    typeOfEntity: TypeOfEntity!
}



""" A pair of strings, of which the first is a key and the second is
its value both represented as strings
(such as : key:'Autore',value:'Mimmo Jodice') """
type BasicInfo {
    key: String!
    value: String!
}


""" An basic item (such as: "Genova, la sopraelevata", etc...)"""
type BasicItem {
    id: ID!
    label: String!
    info: [BasicInfo!]
    icon: String
}



""" Data about an Item necessary to present in a concise listing"""
type ItemListing {
    item: BasicItem!
    thumbnail: String
    relatedTOEData: [TypeOfEntityCountData!]
    """ optionally an Item listing could need to be cathegorized in
    a specific typeOfEntity """
    typeOfEntity: TypeOfEntity
    breadcrumbs: [LinkElement!]
}

""" Data containing an id, as a reference and a key-value pair, to be used
for generic data files (as for example: key:"authod", value:"Giulio Andreini")
(FIXME: maybe id is not necessary) """
type KeyValueField {
    id: ID!
    key: String!
    value: String!
}

""" Group of generic key-value pairs, the gourp has also unique identifier and
an optional label assigned to it """
type KeyValueFieldGroup {
    id: ID!
    label: String
    fields: [KeyValueField!]
}


""" Details about an item element (as for example: 'Genova, la sopraelevata')"""
type ItemDetails {
    item: BasicItem!
    title: String!
    subTitle: String
    image: String
    text: String
    fields: [KeyValueFieldGroup!]
    connectedEntities: [EntityCountData!]
    similarItems: [ItemListing!]
    breadcrumbs: [LinkElement!]
}


""" Details about an entity element (as for example: 'Milano') """
type EntityDetails {
    entity: BasicEntity!
    overviewTab: String
    fieldsTab: [KeyValueFieldGroup!]
    items: [ItemListing!]
    entities: [EntityCountData!]
    extraTab: String
    wikiTab: WikiTab
}

""" WikiTab Entity """
type WikiTab {
    text: String
    url: String
}

""" Used to associate a typeOfEntity with a count/number (as: "People, 6" or "Organizzazioni, 12") 
optionally can be enabled or disabled """
type TypeOfEntityCountData {
    type: TypeOfEntity!
    count: Int!
}

""" Used to present an entity with a count/numerical field """
type EntityCountData {
    entity: BasicEntity!
    count: Int!
}

""" Data about the typeOfEntity filter, cointains counting data about the type of entity
    alongise some entities' count data 
    (Note: the number of these entities has jet to be decided)"""
type TypeOfEntityFilterData {
    countData: TypeOfEntityCountData!
    entitiesCountData: [EntityCountData!]
}

""" Filter data used as the result of a global filer query """
type GlobalFilterData {
    entitiesData: [TypeOfEntityFilterData!]
    itemsPagination: ItemListingPaginationResult
}

""" Tree structure containing an id,label and icon for each element
(used for navigation, as: Patrimonio)"""
type Tree {
    id: ID!
    label: String!
    icon: String
    img: String
    branches: [Tree!]
}

""" Element containing a label and an optional link for the element
(Note: the link doesn't have to be an url, it just has to bee an indication)"""
type LinkElement {
    label: String!
    link: String
}



""" Used to represent a pagination of ItemListings, result of a query """
type ItemListingPaginationResult {
   """ the total count of the itemListings that matched the query request
   if no pagination was requested """
   totalCount: Int!
   """ subset of the totalCount itemListings which have been requested
   by the query's pagination section """
   items: [ItemListing!]
}


#======================================================================================
#                                INPUT TYPES
#======================================================================================



""" Input type used to perform filtering operations based on specified typeOfEntities """
input TypeOfEntityFilterInput {
    typeOfEntityId: ID!
    """ the type of entity can be present but not enabled, for example for updating a global
    count but not presenting its sepcific items"""
    enabled: Boolean!
}



""" Range of dates used for filtering results """
input datesRangeInput {
    startDate: String!
    endDate: String!
}


"""Input type used to request items in a pagination manner"""
input PaginationInput {
  """Offset for the pagination ("starting point" for the request)"""
  offset: Int!
  """Limit for the pagination ("length" for the request)"""
  limit: Int!
}





#======================================================================================
#                                QUERY DEFINITIONS
#======================================================================================



"""Standard GraphQL Query type used to define the possible queries"""
type Query {

 """ Returns all the types of entity present in the system """
 getAllTypesOfEntity: [TypeOfEntity!]!

 """ Restuns all the basic items present in the systems (those items are never
 used in this way in the application, this is a simple query used to testing the mocks)"""
 getAllBasicItems: [BasicItem!]

 """ Returns all the values needed to represent the main section of the homepage (meaning the
 typeofentity-facets, bubblechart and items)"""
 globalFilter( typeOfEntityFiler:[TypeOfEntityFilterInput!],
               selectedEntitiesIds: [ID!],
               dateFilter: datesRangeInput,
               itemsPagination: PaginationInput ) : GlobalFilterData

 """ Returns the details specific to a single item """
 getItemDetails( itemId:ID!
                 maxSimilarItems: Int ): ItemDetails

 """ Returns the details specific to a single entity """
 getEntityDetails( entityId:ID! ): EntityDetails

 """ Returns a tree (there are two notable points in this query, 1. the maximum depth of the
 result has to be specified by the query using graphql's syntaxis, 2. the id used to obtain the
 tree represents the tree's root, therefore any branch of a grater tree can be fetched by specifing
 the branch root's id as the treeId)"""
 getTreeOfItems( treeId: ID! ): Tree

 """ Given a string it returns an array of item listings which match the input string based on
 a certain logic (currently an itemListing is returned if its item's label or at least one of its
 values contains the input string)"""
 autoComplete(
    input: String!
    ### , autoCompleteOptions (<--- to add?)
    itemsPagination: PaginationInput
 ): ItemListingPaginationResult!

}























#======================================================================================
#                                MUTATION DEFINITIONS
#======================================================================================

# mutations are currently not used in the arianna web project

#"""Standard GraphQL Mutation type used to define the possible mutations"""
#type Mutation {
#
#}








