









#======================================================================================
#                                DATA TYPES
#======================================================================================

""" A generic type of entity (such as: "persone", "luoghi", etc...)"""
type TypeOfEntity {
    id: ID!
    label: String!
    icon: String
    color: String
}

""" An basic entity (such as: "Alighiero Boetti", "Luce", etc...)"""
type BasicEntity {
    id: ID!
    label: String!
}

""" An basic item (such as: "Genova, la sopraelevata", etc...)"""
type BasicItem {
    id: ID!
    label: String!
    author: String
    icon: String
}



""" Data about an Item necessary to present in a concise listing"""
type ItemListing {
    item: BasicItem!
    description: String
    thumbnail: String
    relatedTOEData: [TypeOfEntityCountData!]
}


type ItemField {
    id: ID!
    key: String!
    value: String!
}


type ItemFieldGroup {
    id: ID!
    label: String
    fields: [ItemField!]
}



type ItemDetails {
    item: BasicItem!
    title: String!
    subTitle: String
    image: String
    text: String
    fields: [ItemFieldGroup!]
    connectedEntities: [EntityCountData!]
    similarItems: [ItemListing!]
}

""" Used to associate a typeOfEntity with a count/number (as: "People, 6" or "Organizzazioni, 12") 
optionally can be enabled or disabled """
type TypeOfEntityCountData {
    type: TypeOfEntity!
    count: Int!
}

""" Used to present an entity with a count/numerical field """
type EntityCountData {
    entity: BasicEntity!
    count: Int!
}

""" Data about the typeOfEntity filter, cointains counting data about the type of entity
    alongise some entities' count data 
    (Note: the number of these entities has jet to be decided)"""
type TypeOfEntityFilterData {
    countData: TypeOfEntityCountData!
    entitiesCountData: [EntityCountData!]
}

""" Filter data used as the result of a global filer query """
type GlobalFilterData {
    entitiesData: [TypeOfEntityFilterData!]
    items: [ItemListing!] # TO DO : add/implement a paginatedItemListing type
}


#======================================================================================
#                                INPUT TYPES
#======================================================================================



""" Input type used to perform filtering operations based on specified typeOfEntities """
input TypeOfEntityFilterInput {
    typeOfEntityId: ID!
    """ the type of entity can be present but not enabled, for example for updating a global
    count but not presenting its sepcific items"""
    enabled: Boolean
}





############################################# TO REMOVE
type Hero { ###########################################
    title: String #####################################
} #####################################################
#######################################################




#======================================================================================
#                                QUERY DEFINITIONS
#======================================================================================



#"""Standard GraphQL Query type used to define the possible queries"""
type Query {
 getTestHero(title:String): Hero ########## TO REMOVE #############################

 getAllTypesOfEntity: [TypeOfEntity!]!

 getAllBasicItems: [BasicItem!] #### ONLY FOR TESTING the mocks

 globalFilter( typeOfEntityFiler:[TypeOfEntityFilterInput!] , selectedEntitiesIds: [ID!] ) : GlobalFilterData

 getItemDetails( itemId:ID! ): ItemDetails
}























#======================================================================================
#                                MUTATION DEFINITIONS
#======================================================================================


#"""Standard GraphQL Mutation type used to define the possible mutations"""
#type Mutation {
#
#}








