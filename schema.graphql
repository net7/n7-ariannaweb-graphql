#======================================================================================
#                                DATA TYPES
#======================================================================================

""" WikiTab Entity """
type WikiTab {
    text: String
    url: String
}

""" An entity (such as: 'Alighiero Boetti', 'Luce', etc...) """
type Entity {
    id: ID!
    label: String!
    typeOfEntity: String!
    overviewTab: String
    extraTab: String
    wikiTab: WikiTab
    fieldsTab: [KeyValueFieldGroup!]
    items: [ItemListing!]
    entities: [EntityCountData!]
}

""" A pair of strings, of which the first is a key and the second is
its value both represented as strings
(such as : key:'Autore',value:'Mimmo Jodice') """
type BasicInfo {
    key: String!
    value: String!
}

""" An basic item (such as: "Genova, la sopraelevata", etc...)"""
type Item {
    id: ID!
    label: String!
    info: [BasicInfo!]
    icon: String
    title: String!
    subTitle: String
    image: String
    text: String
    fields: [KeyValueFieldGroup!]
    connectedEntities: [EntityCountData!]
    similarItems: [ItemListing!]
    breadcrumbs: [LinkElement!]
}

""" Data about an Item necessary to present in a concise listing"""
type ItemListing {
    item: Item!
    thumbnail: String
    relatedTypesOfEntity: [TypeOfEntityCountData!]
    # breadcrumbs: [LinkElement!]
}

""" Data containing an id, as a reference and a key-value pair, to be used
for generic data files (as for example: key:"authod", value:"Giulio Andreini")
(FIXME: maybe id is not necessary) """
type KeyValueField {
    id: ID!
    key: String!
    value: String!
}

""" Group of generic key-value pairs, the gourp has also unique identifier and
an optional label assigned to it """
type KeyValueFieldGroup {
    id: ID!
    label: String
    fields: [KeyValueField!]
}

""" Used to associate a typeOfEntity with a count/number (as: "People, 6" or "Organizzazioni, 12") 
optionally can be enabled or disabled """
type TypeOfEntityCountData {
    type: String!
    count: Int!
}

""" Used to present an entity with a count/numerical field """
type EntityCountData {
    entity: Entity!
    count: Int!
}

""" Filter data used as the result of a global filer query """
type GlobalFilterData {
    entitiesData: [EntityCountData!]
    itemsPagination: ItemListingPaginationResult
}

""" Tree structure containing an id,label and icon for each element
(used for navigation, as: Patrimonio)"""
type Tree {
    id: ID!
    label: String!
    icon: String
    img: String
    branches: [Tree!]
}

""" Element containing a label and an optional link for the element
(Note: the link doesn't have to be an url, it just has to be an indication)"""
type LinkElement {
    label: String!
    link: String
}

""" Used to represent a pagination of ItemListings, result of a query """
type ItemListingPaginationResult {
   """ the total count of the itemListings that matched the query request
   if no pagination was requested """
   totalCount: Int!
   """ subset of the totalCount itemListings which have been requested
   by the query's pagination section """
   items: [ItemListing!]
}

type EntityListingPaginationResult {
    totalCount: Int!
    entities: [EntityCountData!]
}

#======================================================================================
#                                INPUT TYPES
#======================================================================================

""" Range of dates used for filtering results """
input datesRangeInput {
    startDate: String!
    endDate: String!
}

""" Input type used to request items in a pagination manner """
input PaginationInput {
  """Offset for the pagination ("starting point" for the request)"""
  offset: Int! # from
  """Limit for the pagination ("length" for the request)"""
  limit: Int!  # size
}

#======================================================================================
#                                QUERY DEFINITIONS
#======================================================================================

"""Standard GraphQL Query type used to define the possible queries"""
type Query {

 """ Returns all the types of entity present in the system """
 getAllTypesOfEntity: [String!]!

 """ Returns all the values needed to represent the main section of the homepage (meaning the
 typeofentity-facets, bubblechart and items)"""
 globalFilter(selectedEntitiesIds: [ID!],
            dateFilter: datesRangeInput,
            itemsPagination: PaginationInput
            entitiesListSize: Int) : GlobalFilterData

 """ Returns the details specific to a single item """
 getItem(itemId: ID!, maxSimilarItems: Int, entitiesListSize: Int): Item

 """ Returns all Entities (Only for Debug) """
 getAllEntities: [Entity]!

 """ Returns the details specific to a single entity """
 getEntity(entityId: ID!, itemsPagination: PaginationInput, entitiesListSize: Int): Entity

 """ Returns a tree (there are two notable points in this query, 1. the maximum depth of the
 result has to be specified by the query using graphql's syntaxis, 2. the id used to obtain the
 tree represents the tree's root, therefore any branch of a grater tree can be fetched by specifing
 the branch root's id as the treeId)"""
 getTreeOfItems(treeId: ID!): Tree

 """ Given a string it returns an array of item listings which match the input string based on
 a certain logic (currently an itemListing is returned if its item's label or at least one of its
 values contains the input string)"""
 autoComplete(
    input: String!
    ### , autoCompleteOptions (<--- to add?)
    itemsPagination: PaginationInput
    typeOfEntity:  String!
 ): EntityListingPaginationResult!

}


#======================================================================================
#                                MUTATION DEFINITIONS
#======================================================================================

# mutations are currently not used in the arianna web project

#"""Standard GraphQL Mutation type used to define the possible mutations"""
#type Mutation {
#
#}








