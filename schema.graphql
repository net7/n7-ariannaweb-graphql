











#======================================================================================
#                                DATA TYPES
#======================================================================================

""" A generic type of entity (such as: 'persone', 'luoghi', etc...) """
type TypeOfEntity {
    id: ID!
    label: String!
    icon: String
    color: String
}


""" An basic entity (such as: 'Alighiero Boetti', 'Luce', etc...) """
type BasicEntity {
    id: ID!
    label: String!
    typeOfEntity: TypeOfEntity!
}



""" A pair of strings, of which the first is a key and the second is
its value both represented as strings
(such as : key:'Autore',value:'Mimmo Jodice') """
type basicInfo {
    key: String!
    value: String!
}


""" An basic item (such as: "Genova, la sopraelevata", etc...)"""
type BasicItem {
    id: ID!
    label: String!
    info: [basicInfo!]
    icon: String
}



""" Data about an Item necessary to present in a concise listing"""
type ItemListing {
    item: BasicItem!
    thumbnail: String
    relatedTOEData: [TypeOfEntityCountData!]
    """ optionally an Item listing could need to be cathegorized in
    a specific typeOfEntity """
    typeOfEntity: TypeOfEntity
    breadcrumbs: [LinkElement!]
}

""" Data containing an id, as a reference and a key-value pair, to be used
for generic data files (as for example: key:"authod", value:"Giulio Andreini")
(FIXME: maybe id is not necessary) """
type KeyValueField {
    id: ID!
    key: String!
    value: String!
}

""" Group of generic key-value pairs, the gourp has also unique identifier and
an optional label assigned to it """
type KeyValueFieldGroup {
    id: ID!
    label: String
    fields: [KeyValueField!]
}


""" Details about an item element (as for example: 'Genova, la sopraelevata')"""
type ItemDetails {
    item: BasicItem!
    title: String!
    subTitle: String
    image: String
    text: String
    fields: [KeyValueFieldGroup!]
    connectedEntities: [EntityCountData!]
    similarItems: [ItemListing!]
    breadcrumbs: [LinkElement!]
}


""" Details about an entity element (as for example: 'Milano') """
type EntityDetails {
    entity: BasicEntity!
    overviewTab: String
    fieldsTab: [KeyValueFieldGroup!]
    items: [ItemListing!]
    entities: [EntityCountData!]
    extraTabUrl: String
    wikiTabUrl: String
}


""" Used to associate a typeOfEntity with a count/number (as: "People, 6" or "Organizzazioni, 12") 
optionally can be enabled or disabled """
type TypeOfEntityCountData {
    type: TypeOfEntity!
    count: Int!
}

""" Used to present an entity with a count/numerical field """
type EntityCountData {
    entity: BasicEntity!
    count: Int!
}

""" Data about the typeOfEntity filter, cointains counting data about the type of entity
    alongise some entities' count data 
    (Note: the number of these entities has jet to be decided)"""
type TypeOfEntityFilterData {
    countData: TypeOfEntityCountData!
    entitiesCountData: [EntityCountData!]
}

""" Filter data used as the result of a global filer query """
type GlobalFilterData {
    entitiesData: [TypeOfEntityFilterData!]
    items: [ItemListing!] # TO DO : add/implement a paginatedItemListing type
}

""" Tree structure containing an id,label and icon for each element
(used for navigation, as: Patrimonio)"""
type Tree {
    id: ID!
    label: String!
    icon: String
    branches: [Tree!]
}

""" Element containing a label and an optional link for the element
(Note: the link doesn't have to be an url, it just has to bee an indication)"""
type LinkElement {
    label: String!
    link: String
}

#======================================================================================
#                                INPUT TYPES
#======================================================================================



""" Input type used to perform filtering operations based on specified typeOfEntities """
input TypeOfEntityFilterInput {
    typeOfEntityId: ID!
    """ the type of entity can be present but not enabled, for example for updating a global
    count but not presenting its sepcific items"""
    enabled: Boolean!
}



""" Range of dates used for filtering results """
input datesRangeInput {
    startDate: String!
    endDate: String!
}




#======================================================================================
#                                QUERY DEFINITIONS
#======================================================================================



"""Standard GraphQL Query type used to define the possible queries"""
type Query {

 getAllTypesOfEntity: [TypeOfEntity!]!

 getAllBasicItems: [BasicItem!] #### ONLY FOR TESTING the mocks

 globalFilter( typeOfEntityFiler:[TypeOfEntityFilterInput!] , selectedEntitiesIds: [ID!] , dateFilter: datesRangeInput ) : GlobalFilterData

 getItemDetails( itemId:ID! ): ItemDetails

 getEntityDetails( entityId:ID! ): EntityDetails

 getTreeOfItems( treeId: ID! ): Tree

 autoComplete(
    input: String!
    ### , autoCompleteOptions (<--- to add?)
 ): [ItemListing!]

}























#======================================================================================
#                                MUTATION DEFINITIONS
#======================================================================================


#"""Standard GraphQL Mutation type used to define the possible mutations"""
#type Mutation {
#
#}








