#======================================================================================
#                                DATA TYPES
#======================================================================================

""" WikiTab Entity """
type WikiTab {
    text: String
    url: String
}

union Field = KeyValueField | KeyValueFieldGroup

""" An entity (such as: 'Alighiero Boetti', 'Luce', etc...) """
type Entity {
    id: ID!
    label: String!
    typeOfEntity: String!
    document_type: String
    relation: String
    overviewTab: String
    extraTab: String
    wikiTab: WikiTab
    fields: [Field!]
    relatedItems: [ItemListing!] # related items
    relatedEntities: [EntityCountData!]
}


""" An basic item (such as: "Genova, la sopraelevata", etc...)"""
type Item {
    id: ID!
    label: String!
    title: String!
    document_type: String
    text: String
    icon: String
    subTitle: String
    image: String
    fields: [Field!]
    relatedEntities: [EntityCountData!]
    relatedItems: [ItemListing!] # related items
    breadcrumbs: [LinkElement!]
}

""" Data about an Item necessary to present in a concise listing"""
type ItemListing {
    item: Item!
    thumbnail: String
    relation: String
    relatedTypesOfEntity: [TypeOfEntityCountData!]
    # breadcrumbs: [LinkElement!]
}

""" Data containing an id, as a reference and a key-value pair, to be used
for generic data files (as for example: key:"authod", value:"Giulio Andreini")
(FIXME: maybe id is not necessary) """
type KeyValueField {
    key: String!
    value: String!
}

""" Group of generic key-value pairs, the gourp has also unique identifier and
an optional label assigned to it """
type KeyValueFieldGroup {
    label: String
    fields: [Field!]
}

""" Used to associate a typeOfEntity with a count/number (as: "People, 6" or "Organizzazioni, 12")
optionally can be enabled or disabled """
type TypeOfEntityCountData {
    type: String!
    count: Int!
}

""" Used to present an entity with a count/numerical field """
type EntityCountData {
    entity: Entity!
    count: Int!
    relation: String
}

""" Filter data used as the result of a global filer query """
type GlobalFilterData {
    entitiesData: [EntityCountData!]
    typeOfEntityData: [TypeOfEntityCountData!]
    itemsPagination: ItemListingPaginationResult
}

""" Node structure containing an id,label and icon for each element
(used for navigation, as: Patrimonio)"""
type Node {
    id: ID!
    label: String!
    icon: String
    img: String
    fields: [Field!]
    branches: [Node!]
}

""" Element containing a label and an optional link for the element
(Note: the link doesn't have to be an url, it just has to be an indication)"""
type LinkElement {
    label: String!
    link: String
}

""" Used to represent a pagination of ItemListings, result of a query """
type ItemListingPaginationResult {
   """ the total count of the itemListings that matched the query request
   if no pagination was requested """
   totalCount: Int!
   """ subset of the totalCount itemListings which have been requested
   by the query's pagination section """
   items: [ItemListing!]
}

type PaginationResult {
    totalCount: Int!
    results: [Result!]
}
union Result = Item | EntityCountData

union GenericNode = Node | Item



#======================================================================================
#                                INPUT TYPES
#======================================================================================

""" Range of dates used for filtering results """
input datesRangeInput {
    startDate: String!
    endDate: String!
}

""" Input type used to request items in a pagination manner """
input Page {
  """Offset for the pagination ("starting point" for the request)"""
  offset: Int! # from
  """Limit for the pagination ("length" for the request)"""
  limit: Int!  # size
}

input OptionsInput {
    icon: String
    classes: String
}

type Options {
    icon: String
    classes: String
}

input DataInput {
    label: String!
    value: String!
    counter: Int
    options: OptionsInput
}

type Data {
    label: String!
    value: String!
    counter: Int
    options: Options
}

input SearchFacetInput {
    id: String!
    type: String!
    data: [DataInput!]
    operator: String
    limit: Int
    order: String # field name for ordering
    metadata: [String]
}

type SearchFacet {
    id: String!
    type: String!
    data: [Data!]
    operator: String
    limit: Int
    order: String # field name for ordering
    metadata: [String]
}

input FilterSearchInInput {
    key: String
    operator: String
}

type FilterSearchIn {
    key: String
    operator: String
}

input SearchFilterInput {
    facetId: String
    value: String
    searchIn: [FilterSearchInInput!]
}

type SearchFilter {
    facetId: String
    value: String
    searchIn: [FilterSearchIn!]
}

type ResultsOrder {
    type: String!
    key: String!
    direction: String
}
input ResultsOrderInput {
    type: String!
    key: String!
    direction: String
}

type FieldsTitle {
    highlight: Boolean
    limit: Int
}


input ResultsFieldsInput {
    id: String
    highlight: Boolean
    limit: Int
}
type ResultsFields {
    id: String
    highlight: Boolean
    limit: Int
}

input SearchResultsInput {
    order: ResultsOrderInput
    fields: [ResultsFieldsInput]
}

type SearchResults {
    order: ResultsOrder
    fields: [ResultsFields]
    items: [SearchResult]
}

union SearchResult = Entity | Item

input SearchParameters {
    totalCount: Int!
    facets: [SearchFacetInput!]
    filters: [SearchFilterInput]
    results: SearchResultsInput
    page: Page
}

type SearchResponse {
    totalCount: Int!
    facets: [SearchFacet!]
    filters: [SearchFilter]
    results: SearchResults

}
#======================================================================================
#                                QUERY DEFINITIONS
#======================================================================================

"""Standard GraphQL Query type used to define the possible queries"""
type Query {

 """ Returns all the types of entity present in the system """
 getAllTypesOfEntity: [String!]!

 """ Returns all the values needed to represent the main section of the homepage (meaning the
 typeofentity-facets, bubblechart and items)"""
 globalFilter(selectedEntitiesIds: [ID!],
            dateFilter: datesRangeInput,
            itemsPagination: Page
            entitiesListSize: Int) : GlobalFilterData

 """ Returns the details specific to a single item """
 getItem(itemId: ID!, maxSimilarItems: Int, entitiesListSize: Int): Item

 """ Returns all Entities (Only for Debug) """
 getAllEntities: [Entity]!

 """ Returns the details specific to a single entity """
 getEntity(entityId: ID!, itemsPagination: Page, entitiesListSize: Int): Entity

 """ Returns a tree (there are two notable points in this query, 1. the maximum depth of the
 result has to be specified by the query using graphql's syntaxis, 2. the id used to obtain the
 tree represents the tree's root, therefore any branch of a grater tree can be fetched by specifing
 the branch root's id as the treeId)"""
 getTreeOfItems: Node


 getNode(id: ID!, maxSimilarItems: Int, entitiesListSize: Int): GenericNode

 """ Given a string it returns an array of item listings which match the input string based on
 a certain logic (currently an itemListing is returned if its item's label or at least one of its
 values contains the input string)"""
 autoComplete(
    input: String!
    ### , autoCompleteOptions (<--- to add?)
    itemsPagination: Page
    typeOfEntity:  String
 ): PaginationResult!

search(searchParameters: SearchParameters!): SearchResponse
}


#======================================================================================
#                                MUTATION DEFINITIONS
#======================================================================================

# mutations are currently not used in the arianna web project

#"""Standard GraphQL Mutation type used to define the possible mutations"""
#type Mutation {
#
#}
